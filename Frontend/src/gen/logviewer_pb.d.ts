// @generated by protoc-gen-es v1.10.1
// @generated from file logviewer.proto (package logviewer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum logviewer.v1.ReportFormat
 */
export declare enum ReportFormat {
  /**
   * @generated from enum value: REPORT_FORMAT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: REPORT_FORMAT_CSV = 1;
   */
  CSV = 1,

  /**
   * @generated from enum value: REPORT_FORMAT_JSON = 2;
   */
  JSON = 2,

  /**
   * @generated from enum value: REPORT_FORMAT_PDF = 3;
   */
  PDF = 3,
}

/**
 * @generated from message logviewer.v1.ImportMeta
 */
export declare class ImportMeta extends Message<ImportMeta> {
  /**
   * @generated from field: string file_name = 1;
   */
  fileName: string;

  constructor(data?: PartialMessage<ImportMeta>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.ImportMeta";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportMeta;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportMeta;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportMeta;

  static equals(a: ImportMeta | PlainMessage<ImportMeta> | undefined, b: ImportMeta | PlainMessage<ImportMeta> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.LogLine
 */
export declare class LogLine extends Message<LogLine> {
  /**
   * @generated from field: string raw_json = 1;
   */
  rawJson: string;

  constructor(data?: PartialMessage<LogLine>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.LogLine";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogLine;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogLine;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogLine;

  static equals(a: LogLine | PlainMessage<LogLine> | undefined, b: LogLine | PlainMessage<LogLine> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.ImportEnvelope
 */
export declare class ImportEnvelope extends Message<ImportEnvelope> {
  /**
   * @generated from oneof logviewer.v1.ImportEnvelope.payload
   */
  payload: {
    /**
     * @generated from field: logviewer.v1.ImportMeta meta = 1;
     */
    value: ImportMeta;
    case: "meta";
  } | {
    /**
     * @generated from field: logviewer.v1.LogLine line = 2;
     */
    value: LogLine;
    case: "line";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ImportEnvelope>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.ImportEnvelope";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportEnvelope;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportEnvelope;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportEnvelope;

  static equals(a: ImportEnvelope | PlainMessage<ImportEnvelope> | undefined, b: ImportEnvelope | PlainMessage<ImportEnvelope> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.ImportFile
 */
export declare class ImportFile extends Message<ImportFile> {
  /**
   * @generated from field: string file_name = 1;
   */
  fileName: string;

  /**
   * @generated from field: bytes content = 2;
   */
  content: Uint8Array;

  constructor(data?: PartialMessage<ImportFile>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.ImportFile";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportFile;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportFile;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportFile;

  static equals(a: ImportFile | PlainMessage<ImportFile> | undefined, b: ImportFile | PlainMessage<ImportFile> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.ImportResult
 */
export declare class ImportResult extends Message<ImportResult> {
  /**
   * @generated from field: string import_id = 1;
   */
  importId: string;

  /**
   * @generated from field: string file_name = 2;
   */
  fileName: string;

  /**
   * @generated from field: int64 total = 3;
   */
  total: bigint;

  /**
   * @generated from field: int64 saved = 4;
   */
  saved: bigint;

  /**
   * @generated from field: int64 failed = 5;
   */
  failed: bigint;

  constructor(data?: PartialMessage<ImportResult>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.ImportResult";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImportResult;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImportResult;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImportResult;

  static equals(a: ImportResult | PlainMessage<ImportResult> | undefined, b: ImportResult | PlainMessage<ImportResult> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.QueryRequest
 */
export declare class QueryRequest extends Message<QueryRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page: number;

  /**
   * @generated from field: int32 size = 2;
   */
  size: number;

  /**
   * @generated from field: string ts_from = 3;
   */
  tsFrom: string;

  /**
   * @generated from field: string ts_to = 4;
   */
  tsTo: string;

  /**
   * @generated from field: string level = 5;
   */
  level: string;

  /**
   * @generated from field: string section = 6;
   */
  section: string;

  /**
   * @generated from field: bool unread_only = 7;
   */
  unreadOnly: boolean;

  /**
   * @generated from field: string q = 8;
   */
  q: string;

  /**
   * @generated from field: map<string, string> filters = 9;
   */
  filters: { [key: string]: string };

  /**
   * @generated from field: optional string sort_by = 10;
   */
  sortBy?: string;

  /**
   * @generated from field: optional bool sort_desc = 11;
   */
  sortDesc?: boolean;

  /**
   * @generated from field: optional bool group_by_req_id = 12;
   */
  groupByReqId?: boolean;

  constructor(data?: PartialMessage<QueryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.QueryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRequest;

  static equals(a: QueryRequest | PlainMessage<QueryRequest> | undefined, b: QueryRequest | PlainMessage<QueryRequest> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.LogRecord
 */
export declare class LogRecord extends Message<LogRecord> {
  /**
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: string ts = 2;
   */
  ts: string;

  /**
   * @generated from field: string level = 3;
   */
  level: string;

  /**
   * @generated from field: string section = 4;
   */
  section: string;

  /**
   * @generated from field: string module = 5;
   */
  module: string;

  /**
   * @generated from field: string message = 6;
   */
  message: string;

  /**
   * @generated from field: string req_id = 7;
   */
  reqId: string;

  /**
   * @generated from field: string trans_id = 8;
   */
  transId: string;

  /**
   * @generated from field: string rpc = 9;
   */
  rpc: string;

  /**
   * @generated from field: string resource_type = 10;
   */
  resourceType: string;

  /**
   * @generated from field: string data_source_type = 11;
   */
  dataSourceType: string;

  /**
   * @generated from field: string http_op_type = 12;
   */
  httpOpType: string;

  /**
   * @generated from field: int32 status_code = 13;
   */
  statusCode: number;

  /**
   * @generated from field: string file_name = 14;
   */
  fileName: string;

  /**
   * @generated from field: string import_id = 15;
   */
  importId: string;

  /**
   * @generated from field: bool unread = 16;
   */
  unread: boolean;

  constructor(data?: PartialMessage<LogRecord>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.LogRecord";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogRecord;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogRecord;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogRecord;

  static equals(a: LogRecord | PlainMessage<LogRecord> | undefined, b: LogRecord | PlainMessage<LogRecord> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.QueryResponse
 */
export declare class QueryResponse extends Message<QueryResponse> {
  /**
   * @generated from field: int64 total = 1;
   */
  total: bigint;

  /**
   * @generated from field: int32 page = 2;
   */
  page: number;

  /**
   * @generated from field: int32 size = 3;
   */
  size: number;

  /**
   * @generated from field: repeated logviewer.v1.LogRecord items = 4;
   */
  items: LogRecord[];

  constructor(data?: PartialMessage<QueryResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.QueryResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResponse;

  static equals(a: QueryResponse | PlainMessage<QueryResponse> | undefined, b: QueryResponse | PlainMessage<QueryResponse> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.ExportRequest
 */
export declare class ExportRequest extends Message<ExportRequest> {
  /**
   * @generated from field: logviewer.v1.QueryRequest query = 1;
   */
  query?: QueryRequest;

  constructor(data?: PartialMessage<ExportRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.ExportRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportRequest;

  static equals(a: ExportRequest | PlainMessage<ExportRequest> | undefined, b: ExportRequest | PlainMessage<ExportRequest> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.MarkReadRequest
 */
export declare class MarkReadRequest extends Message<MarkReadRequest> {
  /**
   * @generated from field: repeated int64 ids = 1;
   */
  ids: bigint[];

  /**
   * @generated from field: string req_id = 2;
   */
  reqId: string;

  /**
   * @generated from field: bool mark_read = 3;
   */
  markRead: boolean;

  constructor(data?: PartialMessage<MarkReadRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.MarkReadRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarkReadRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarkReadRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarkReadRequest;

  static equals(a: MarkReadRequest | PlainMessage<MarkReadRequest> | undefined, b: MarkReadRequest | PlainMessage<MarkReadRequest> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.MarkReadResponse
 */
export declare class MarkReadResponse extends Message<MarkReadResponse> {
  /**
   * @generated from field: int64 updated = 1;
   */
  updated: bigint;

  constructor(data?: PartialMessage<MarkReadResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.MarkReadResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarkReadResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarkReadResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarkReadResponse;

  static equals(a: MarkReadResponse | PlainMessage<MarkReadResponse> | undefined, b: MarkReadResponse | PlainMessage<MarkReadResponse> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.TimelineRequest
 */
export declare class TimelineRequest extends Message<TimelineRequest> {
  /**
   * @generated from field: string req_id = 1;
   */
  reqId: string;

  /**
   * @generated from field: string ts_from = 2;
   */
  tsFrom: string;

  /**
   * @generated from field: string ts_to = 3;
   */
  tsTo: string;

  /**
   * @generated from field: string import_id = 4;
   */
  importId: string;

  constructor(data?: PartialMessage<TimelineRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.TimelineRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineRequest;

  static equals(a: TimelineRequest | PlainMessage<TimelineRequest> | undefined, b: TimelineRequest | PlainMessage<TimelineRequest> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.TimelineItem
 */
export declare class TimelineItem extends Message<TimelineItem> {
  /**
   * @generated from field: string req_id = 1;
   */
  reqId: string;

  /**
   * @generated from field: string start_ts = 2;
   */
  startTs: string;

  /**
   * @generated from field: string end_ts = 3;
   */
  endTs: string;

  /**
   * @generated from field: int32 count = 4;
   */
  count: number;

  /**
   * @generated from field: string import_id = 5;
   */
  importId: string;

  constructor(data?: PartialMessage<TimelineItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.TimelineItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimelineItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimelineItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimelineItem;

  static equals(a: TimelineItem | PlainMessage<TimelineItem> | undefined, b: TimelineItem | PlainMessage<TimelineItem> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.GetLogRequest
 */
export declare class GetLogRequest extends Message<GetLogRequest> {
  /**
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  constructor(data?: PartialMessage<GetLogRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.GetLogRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLogRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLogRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLogRequest;

  static equals(a: GetLogRequest | PlainMessage<GetLogRequest> | undefined, b: GetLogRequest | PlainMessage<GetLogRequest> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.LogDetails
 */
export declare class LogDetails extends Message<LogDetails> {
  /**
   * @generated from field: logviewer.v1.LogRecord record = 1;
   */
  record?: LogRecord;

  /**
   * @generated from field: string raw_json = 2;
   */
  rawJson: string;

  /**
   * @generated from field: string attrs_json = 3;
   */
  attrsJson: string;

  /**
   * @generated from field: string annotations_json = 4;
   */
  annotationsJson: string;

  /**
   * @generated from field: int32 bodies_count = 5;
   */
  bodiesCount: number;

  constructor(data?: PartialMessage<LogDetails>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.LogDetails";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogDetails;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogDetails;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogDetails;

  static equals(a: LogDetails | PlainMessage<LogDetails> | undefined, b: LogDetails | PlainMessage<LogDetails> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.BodiesRequest
 */
export declare class BodiesRequest extends Message<BodiesRequest> {
  /**
   * @generated from field: int64 log_id = 1;
   */
  logId: bigint;

  constructor(data?: PartialMessage<BodiesRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.BodiesRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BodiesRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BodiesRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BodiesRequest;

  static equals(a: BodiesRequest | PlainMessage<BodiesRequest> | undefined, b: BodiesRequest | PlainMessage<BodiesRequest> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.BodyItem
 */
export declare class BodyItem extends Message<BodyItem> {
  /**
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: string kind = 2;
   */
  kind: string;

  /**
   * @generated from field: string body_json = 3;
   */
  bodyJson: string;

  constructor(data?: PartialMessage<BodyItem>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.BodyItem";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BodyItem;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BodyItem;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BodyItem;

  static equals(a: BodyItem | PlainMessage<BodyItem> | undefined, b: BodyItem | PlainMessage<BodyItem> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.ReportExportRequest
 */
export declare class ReportExportRequest extends Message<ReportExportRequest> {
  /**
   * @generated from field: logviewer.v1.QueryRequest query = 1;
   */
  query?: QueryRequest;

  /**
   * @generated from field: logviewer.v1.ReportFormat format = 2;
   */
  format: ReportFormat;

  constructor(data?: PartialMessage<ReportExportRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.ReportExportRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportExportRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportExportRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportExportRequest;

  static equals(a: ReportExportRequest | PlainMessage<ReportExportRequest> | undefined, b: ReportExportRequest | PlainMessage<ReportExportRequest> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.ReportChunk
 */
export declare class ReportChunk extends Message<ReportChunk> {
  /**
   * @generated from field: string file_name = 1;
   */
  fileName: string;

  /**
   * @generated from field: bytes payload = 2;
   */
  payload: Uint8Array;

  /**
   * @generated from field: bool eof = 3;
   */
  eof: boolean;

  constructor(data?: PartialMessage<ReportChunk>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.ReportChunk";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReportChunk;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReportChunk;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReportChunk;

  static equals(a: ReportChunk | PlainMessage<ReportChunk> | undefined, b: ReportChunk | PlainMessage<ReportChunk> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.GroupQueryRequest
 */
export declare class GroupQueryRequest extends Message<GroupQueryRequest> {
  /**
   * @generated from field: logviewer.v1.QueryRequest query = 1;
   */
  query?: QueryRequest;

  constructor(data?: PartialMessage<GroupQueryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.GroupQueryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupQueryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupQueryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupQueryRequest;

  static equals(a: GroupQueryRequest | PlainMessage<GroupQueryRequest> | undefined, b: GroupQueryRequest | PlainMessage<GroupQueryRequest> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.LogGroupItems
 */
export declare class LogGroupItems extends Message<LogGroupItems> {
  /**
   * @generated from field: string req_id = 1;
   */
  reqId: string;

  /**
   * @generated from field: string group_first_ts = 2;
   */
  groupFirstTs: string;

  /**
   * @generated from field: string group_last_ts = 3;
   */
  groupLastTs: string;

  /**
   * @generated from field: repeated logviewer.v1.LogRecord items = 4;
   */
  items: LogRecord[];

  constructor(data?: PartialMessage<LogGroupItems>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.LogGroupItems";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LogGroupItems;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LogGroupItems;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LogGroupItems;

  static equals(a: LogGroupItems | PlainMessage<LogGroupItems> | undefined, b: LogGroupItems | PlainMessage<LogGroupItems> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.GroupQueryResponse
 */
export declare class GroupQueryResponse extends Message<GroupQueryResponse> {
  /**
   * @generated from field: int64 total_groups = 1;
   */
  totalGroups: bigint;

  /**
   * @generated from field: int32 page = 2;
   */
  page: number;

  /**
   * @generated from field: int32 size = 3;
   */
  size: number;

  /**
   * @generated from field: repeated logviewer.v1.LogGroupItems groups = 4;
   */
  groups: LogGroupItems[];

  constructor(data?: PartialMessage<GroupQueryResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.GroupQueryResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupQueryResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupQueryResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupQueryResponse;

  static equals(a: GroupQueryResponse | PlainMessage<GroupQueryResponse> | undefined, b: GroupQueryResponse | PlainMessage<GroupQueryResponse> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.PluginEvent
 */
export declare class PluginEvent extends Message<PluginEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string ts = 2;
   */
  ts: string;

  /**
   * @generated from field: string level = 3;
   */
  level: string;

  /**
   * @generated from field: string section = 4;
   */
  section: string;

  /**
   * @generated from field: string message = 5;
   */
  message: string;

  /**
   * @generated from field: map<string, string> attrs = 6;
   */
  attrs: { [key: string]: string };

  constructor(data?: PartialMessage<PluginEvent>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.PluginEvent";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginEvent;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginEvent;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginEvent;

  static equals(a: PluginEvent | PlainMessage<PluginEvent> | undefined, b: PluginEvent | PlainMessage<PluginEvent> | undefined): boolean;
}

/**
 * @generated from message logviewer.v1.PluginResult
 */
export declare class PluginResult extends Message<PluginResult> {
  /**
   * @generated from field: map<string, string> annotations = 1;
   */
  annotations: { [key: string]: string };

  constructor(data?: PartialMessage<PluginResult>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "logviewer.v1.PluginResult";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PluginResult;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PluginResult;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PluginResult;

  static equals(a: PluginResult | PlainMessage<PluginResult> | undefined, b: PluginResult | PlainMessage<PluginResult> | undefined): boolean;
}

