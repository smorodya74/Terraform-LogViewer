// @generated by protoc-gen-connect-web v0.8.6
// @generated from file logviewer.proto (package logviewer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { BodiesRequest, BodyItem, ExportRequest, GetLogRequest, GroupQueryRequest, GroupQueryResponse, ImportEnvelope, ImportFile, ImportResult, LogDetails, LogRecord, MarkReadRequest, MarkReadResponse, PluginEvent, PluginResult, QueryRequest, QueryResponse, ReportChunk, ReportExportRequest, TimelineItem, TimelineRequest } from "./logviewer_pb.js";

import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service logviewer.v1.LogIngest
 */
export declare const LogIngest: {
  readonly typeName: "logviewer.v1.LogIngest",
  readonly methods: {
    /**
     * @generated from rpc logviewer.v1.LogIngest.Ingest
     */
    readonly ingest: {
      readonly name: "Ingest",
      readonly I: typeof ImportEnvelope,
      readonly O: typeof ImportResult,
      readonly kind: MethodKind.ClientStreaming,
    },
    /**
     * @generated from rpc logviewer.v1.LogIngest.IngestFile
     */
    readonly ingestFile: {
      readonly name: "IngestFile",
      readonly I: typeof ImportFile,
      readonly O: typeof ImportResult,
      readonly kind: MethodKind.Unary,
    },
  }
};

/**
 * @generated from service logviewer.v1.LogQuery
 */
export declare const LogQuery: {
  readonly typeName: "logviewer.v1.LogQuery",
  readonly methods: {
    /**
     * @generated from rpc logviewer.v1.LogQuery.Search
     */
    readonly search: {
      readonly name: "Search",
      readonly I: typeof QueryRequest,
      readonly O: typeof QueryResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc logviewer.v1.LogQuery.SearchGroups
     */
    readonly searchGroups: {
      readonly name: "SearchGroups",
      readonly I: typeof GroupQueryRequest,
      readonly O: typeof GroupQueryResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc logviewer.v1.LogQuery.Export
     */
    readonly export: {
      readonly name: "Export",
      readonly I: typeof ExportRequest,
      readonly O: typeof LogRecord,
      readonly kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc logviewer.v1.LogQuery.MarkRead
     */
    readonly markRead: {
      readonly name: "MarkRead",
      readonly I: typeof MarkReadRequest,
      readonly O: typeof MarkReadResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc logviewer.v1.LogQuery.Timeline
     */
    readonly timeline: {
      readonly name: "Timeline",
      readonly I: typeof TimelineRequest,
      readonly O: typeof TimelineItem,
      readonly kind: MethodKind.ServerStreaming,
    },
    /**
     * @generated from rpc logviewer.v1.LogQuery.GetLog
     */
    readonly getLog: {
      readonly name: "GetLog",
      readonly I: typeof GetLogRequest,
      readonly O: typeof LogDetails,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc logviewer.v1.LogQuery.Bodies
     */
    readonly bodies: {
      readonly name: "Bodies",
      readonly I: typeof BodiesRequest,
      readonly O: typeof BodyItem,
      readonly kind: MethodKind.ServerStreaming,
    },
  }
};

/**
 * @generated from service logviewer.v1.ReportService
 */
export declare const ReportService: {
  readonly typeName: "logviewer.v1.ReportService",
  readonly methods: {
    /**
     * @generated from rpc logviewer.v1.ReportService.Export
     */
    readonly export: {
      readonly name: "Export",
      readonly I: typeof ReportExportRequest,
      readonly O: typeof ReportChunk,
      readonly kind: MethodKind.ServerStreaming,
    },
  }
};

/**
 * @generated from service logviewer.v1.LogPlugin
 */
export declare const LogPlugin: {
  readonly typeName: "logviewer.v1.LogPlugin",
  readonly methods: {
    /**
     * @generated from rpc logviewer.v1.LogPlugin.Process
     */
    readonly process: {
      readonly name: "Process",
      readonly I: typeof PluginEvent,
      readonly O: typeof PluginResult,
      readonly kind: MethodKind.BiDiStreaming,
    },
  }
};

